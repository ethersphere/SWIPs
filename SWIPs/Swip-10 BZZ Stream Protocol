---
SWIP: 10
title: BZZ Stream Protocol
author: Viktor Tr√≥n, (@zelig) <viktor@ethswarm.org>,  Tim Bansemer (editorial) (@FantasticoFox) <tim@ethswarm.org>, Elad Nachmias, (@acud) <elad@ethswarm.org>

status: Draft
type: Standards Track Core, Networking
category: Core | Networking
created: 2019-08-01
---

<!--You can leave these HTML comments in your merged SWIP and delete the visible duplicate text guides, they will not appear and may be helpful to refer to if you edit it again. This is the suggested template for new SWIPs. Note that a SWIP number will be assigned by an editor. When opening a pull request to submit your SWIP, please use an abbreviated title in the filename, `SWIP-draft_title_abbrev.md`. The title should be 44 characters or less.-->
This is the suggested template for new SWIPs.

Note that a SWIP number will be assigned by an editor. When opening a pull request to submit your SWIP, please use an abbreviated title in the filename, `SWIP-draft_title_abbrev.md`.
The title should be 44 characters or less.

## Simple Summary
<!--"If you can't explain it simply, you don't understand it well enough." Provide a simplified and layman-accessible explanation of the SWIP.-->
If you can't explain it simply, you don't understand it well enough." Provide a simplified and layman-accessible explanation of the SWIP.

The BZZ Stream Protocol facilitates data transmission between two swarm nodes, specifically targeting sequential data in the form of a sequence of chunks as defined by swarm.

## Abstract
<!--A short (~200 word) description of the technical issue being addressed.-->
A short (~200 word) description of the technical issue being addressed.

The protocol should cater for the following requirements:

 * client should be able to request arbitrary ranges of hashes from the serving peer
 * client can be assumed to have some of the data already and therefore can opt in to selectively request chunks based on their hashes

To mitigate duplicate data transmission the stream protocol provides a configurable message roundtrip before executing a batch delivery which allows the downstream peer to selectively request the chunks which it does not store at the time of the request. 

When delivery batches are pre-negotiated (i.e. when the client selectively tells the server which chunks it would like to receive), we can conclude that the delivery batches are optimsed for urgency rather than for maximising batch utilisation (since the server sends a certain batch that potentially gets reduced into a smaller one by the client before actually being transmitted)

## Motivation
<!--The motivation is critical for SWIPs that want to change the Swarm protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the SWIP solves. SWIP submissions without sufficient motivation may be rejected outright.-->

This SWIP is motivated by providing a clear definition how the dataexchange between swarm nodes is taking place. This is the first specification of this process.

## Specification
<!--The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for the current Swarm platform and future client implementations.-->

Wire Protocol Specifications
============================

### The wire protocol defines the following messages:

| Msg Name | From->To | Params   | Example |
| -------- | -------- | -------- | ------- |
| StreamInfoReq   | Client->Server  | Streams`[]ID` | `SYNC\|6, SYNC\|5` |
| StreamInfoRes   | Server->Client  | Streams`[]StreamDescriptor` <br>Stream`ID`<br>Cursor`uint64`<br>Bounded`bool` | `SYNC\|6;CUR=1632;bounded, SYNC\|7;CUR=18433;bounded` |
| GetRange | Client->Server| Ruid`uint`<br>Stream `string`<br>From`uint`<br>To`*uint`(nullable)<br>Roundtrip`bool` | `Ruid: 21321, Stream: SYNC\|6, From: 1, To: 100`(bounded), Roundtrip: true<br>`Stream: SYNC\|7, From: 109, Roundtrip: true`(unbounded) | 
| OfferedHashes | Server->Client| Ruid`uint`<br>Hashes `[]byte` | `Ruid: 21321, Hashes: [cbcbbaddda, bcbbbdbbdc, ....]` |
| WantedHashes | Client->Server | Ruid`uint`<br>Bitvector`[]byte` | `Ruid: 21321, Bitvector: [0100100100] ` |
| ChunkDelivery | Server->Client | Ruid`uint`<br>[]Chunk `[]byte` | `Ruid: 21321, Chunk: [001000101]` |
| BatchDone | Server->Client| Ruid `uint`<br>Last `uint` | `Ruid: 21321, Last: 113331` |
| StreamState | Client<->Server | Stream`string`<br>Code`uint16`<br>Message`string`| `Stream: SYNC\|6, Code:1, Message:"Stream became bounded"`<br>`Stream: SYNC\|5, Code:2, Message: "No such stream"` |

Notes:
* communicating the last bin index when roundtrip is configured - can be done on top of OfferedHashes message (alongside the hashes), or to reuse the ACK from the no-roundtrip config
* two notions of bounded - on the stream level and on the localstore
* if TO is not specified - we assume unbounded stream, and we just send whatever, until at most, we fill up an entire batch.

### Message and interface definitions:


```go
// StreamProvider interface provides a lightweight abstraction that allows an easily-pluggable
// stream provider as part of the Stream! protocol specification.
type StreamProvider interface {
  NeedData(ctx context.Context, key []byte) (need bool, wait func(context.Context) error)
	Get(ctx context.Context, addr chunk.Address) ([]byte, error)
	Put(ctx context.Context, addr chunk.Address, data []byte) (exists bool, err error)
	Subscribe(ctx context.Context, key interface{}, from, to uint64) (<-chan chunk.Descriptor, func())
	Cursor(interface{}) (uint64, error)
	RunUpdateStreams(p *Peer)
	StreamName() string
	ParseKey(string) (interface{}, error)
	EncodeKey(interface{}) (string, error)
	StreamBehavior() StreamInitBehavior
	Boundedness() bool
}
```

```go
type StreamInitBehavior int
```

```go
// StreamInfoReq is a request to get information about particular streams
type StreamInfoReq struct {
	Streams []ID
}
```

```go
// StreamInfoRes is a response to StreamInfoReq with the corresponding stream descriptors
type StreamInfoRes struct {
	Streams []StreamDescriptor
}
```

```go
// StreamDescriptor describes an arbitrary stream
type StreamDescriptor struct {
	Stream  ID
	Cursor  uint64
	Bounded bool
}
```

```go
// GetRange is a message sent from the downstream peer to the upstream peer asking for chunks
// within a particular interval for a certain stream
type GetRange struct {
	Ruid      uint
	Stream    ID
	From      uint64
	To        uint64 `rlp:nil`
	BatchSize uint
	Roundtrip bool
}
```

```go
// OfferedHashes is a message sent from the upstream peer to the downstream peer allowing the latter
// to selectively ask for chunks within a particular requested interval
type OfferedHashes struct {
	Ruid      uint
	LastIndex uint
	Hashes    []byte
}
```

```go
// WantedHashes is a message sent from the downstream peer to the upstream peer in response
// to OfferedHashes in order to selectively ask for a particular chunks within an interval
type WantedHashes struct {
	Ruid      uint
	BitVector []byte
}
```

```go
// ChunkDelivery delivers a frame of chunks in response to a WantedHashes message
type ChunkDelivery struct {
	Ruid      uint
	LastIndex uint
	Chunks    []DeliveredChunk
}
```

```go
// DeliveredChunk encapsulates a particular chunk's underlying data within a ChunkDelivery message
type DeliveredChunk struct {
	Addr storage.Address
	Data []byte
}
```

```go
// StreamState is a message exchanged between two nodes to notify of changes or errors in a stream's state
type StreamState struct {
	Stream  ID
	Code    uint16
	Message string
}
```

```go
// Stream defines a unique stream identifier in a textual representation
type ID struct {
	// Name is used for the Stream provider identification
	Name string
	// Key is the name of specific data stream within the stream provider. The semantics of this value
	// is at the discretion of the stream provider implementation
	Key string
}
```

Message exchange examples:
======

Initial handshake - client queries server for stream states<br>
![handshake](stream-handshake.png)
<br>
GetRange (bounded) - client requests a bounded range within a stream<br>
![bounded-range](stream-bounded.png)
<br>
GetRange (unbounded) - client requests an unbounded range (specifies only `From` parameter)<br>
![unbounded-range](stream-unbounded.png)
<br>
GetRange (no roundtrip) - client requests an unbounded or bounded range with no roundtrip configured<br>
![unbounded-range](stream-no-roundtrip.png)

## Rationale
<!--The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.-->

There are several occasions for nodes to exchange data with each other where the data is defined of a squence of chunks of Swarm nodes. There are significant bandwith savings by having a formalised protocol functionality which allows to check for offered hashes and already available hashes of existing chunks for the retrieving node.

Example 1: 
A pull sync
 * Simultanous streams
 * Stream of chunks is defined by the upstreams peers database

Example 2:
To sync a current state of a database e.g. Ethereum State on Swarm

Example 3:
Torrent-like download of files. e.g. Light-Clients which ask serveral nodes to serve them chunks from specific hash ranges.
While they compete, they will save bandwith by only requested specfic chunks still due for transmission instead of full hash-ranges.

## Backwards Compatibility
<!--All SWIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The SWIP must explain how the author proposes to deal with these incompatibilities. SWIP submissions without a sufficient backwards compatibility treatise may be rejected outright.-->

## Test Cases
<!--Test cases for an implementation are mandatory for SWIPs that are affecting changes to data and message formats. Other SWIPs can choose to include links to test cases if applicable.-->

Test cases for the Go-Client:
[TODO] for summarize high-level test szenarios which need to be covered to proof that the specc works as fledged out.

## Implementation
<!--The implementations must be completed before any SWIP is given status "Final", but it need not be completed before the SWIP is accepted. While there is merit to the approach of reaching consensus on the specification and rationale before writing code, the principle of "rough consensus and running code" is still useful when it comes to resolving many discussions of API details.-->

Current Pull Request: https://github.com/ethersphere/swarm/pull/1538 

## Copyright
Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).
